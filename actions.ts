/* This file is autogenerated by liwe3-svelte */
/* eslint-disable @typescript-eslint/no-inferrable-types */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */

/*=== f2c_start __file ===*/
import type { MarkerGoogleAddress, MarkerPosition } from './types';
/*=== f2c_end __file ===*/

import { get, patch, post, delete_, type LiWEFetcherOptions } from '$liwe3/utils/fetcher';

/**
 * @param id - marker id [req]
 *
 * @return marker: Marker
 *
 */
export const mapmarkers_get = async ( id: string, _options?: LiWEFetcherOptions ) => {
	const res = await get( `/api/mapmarkers/get`, { id }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start mapmarkers_get ===*/

	/*=== f2c_end mapmarkers_get ===*/

	return res.marker;
};

/**
 * @param id - Marker id [req]
 *
 * @return ok: boolean
 *
 */
export const mapmarkers_admin_del = async ( id: string, _options?: LiWEFetcherOptions ) => {
	const res = await delete_( `/api/mapmarkers/admin/del`, { id }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start mapmarkers_admin_del ===*/

	/*=== f2c_end mapmarkers_admin_del ===*/

	return res.ok;
};

/**
 * @param id - Marker id [req]
 * @param title -  [opt]
 * @param position - Marker position { lat, lng } [opt]
 * @param full_address -  [opt]
 * @param description -  [opt]
 * @param address -  [opt]
 * @param phone -  [opt]
 * @param email - Marker email [opt]
 * @param website - Marker website url [opt]
 * @param enabled -  [opt]
 *
 * @return marker: Marker
 *
 */
export const mapmarkers_admin_edit = async ( id: string, title?: string, position?: any, full_address?: MarkerGoogleAddress[], description?: string, address?: string, phone?: string, email?: string, website?: string, enabled?: boolean, _options?: LiWEFetcherOptions ) => {
	const res = await patch( `/api/mapmarkers/admin/edit`, { 
		address,
		description,
		email,
		enabled,
		full_address,
		id,
		phone,
		position,
		title,
		website
	 }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start mapmarkers_admin_edit ===*/

	/*=== f2c_end mapmarkers_admin_edit ===*/

	return res.marker;
};

/**
 *
 * @return marker: Marker
 *
 */
export const mapmarkers_list = async ( _options?: any ) => {
	const res = await get( `/api/mapmarkers/list`, {}, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start mapmarkers_list ===*/

	/*=== f2c_end mapmarkers_list ===*/

	return res.marker;
};

/**
 * @param title - Marker title [req]
 * @param position - Marker position { lat, lng } [req]
 * @param full_address - Google places  object [opt]
 * @param description - Marker description [opt]
 * @param address - Marker address [opt]
 * @param phone - Marker phone [opt]
 * @param email - Marker email [opt]
 * @param website - Marker website [opt]
 * @param enabled -  [opt]
 *
 * @return marker: Marker
 *
 */
export const mapmarkers_admin_add = async ( title: string, position: any, full_address?: MarkerGoogleAddress[], description?: string, address?: string, phone?: string, email?: string, website?: string, enabled?: boolean, _options?: LiWEFetcherOptions ) => {
	const res = await post( `/api/mapmarkers/admin/add`, { 
		address,
		description,
		email,
		enabled,
		full_address,
		phone,
		position,
		title,
		website
	 }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start mapmarkers_admin_add ===*/

	/*=== f2c_end mapmarkers_admin_add ===*/

	return res.marker;
};

/**
 *
 * @return marker: Marker
 *
 */
export const mapmarkers_admin_list = async ( _options?: any ) => {
	const res = await get( `/api/mapmarkers/admin/list`, {}, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start mapmarkers_admin_list ===*/

	/*=== f2c_end mapmarkers_admin_list ===*/

	return res.marker;
};
